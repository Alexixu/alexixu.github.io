<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex&#39; Blog</title>
  
  <subtitle>记录生活和工作</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alexixu.github.io/"/>
  <updated>2019-10-31T11:28:43.784Z</updated>
  <id>http://alexixu.github.io/</id>
  
  <author>
    <name>Alexixu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生日快乐</title>
    <link href="http://alexixu.github.io/2019/10/31/happy-birthday/"/>
    <id>http://alexixu.github.io/2019/10/31/happy-birthday/</id>
    <published>2019-10-31T11:27:04.000Z</published>
    <updated>2019-10-31T11:28:43.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小老弟，生日快乐"><a href="#小老弟，生日快乐" class="headerlink" title="小老弟，生日快乐"></a>小老弟，生日快乐</h1><p>永远18岁，放下书本，立即毕业！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小老弟，生日快乐&quot;&gt;&lt;a href=&quot;#小老弟，生日快乐&quot; class=&quot;headerlink&quot; title=&quot;小老弟，生日快乐&quot;&gt;&lt;/a&gt;小老弟，生日快乐&lt;/h1&gt;&lt;p&gt;永远18岁，放下书本，立即毕业！&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>强化学习读书笔记</title>
    <link href="http://alexixu.github.io/2019/10/27/reinforcement-learning01/"/>
    <id>http://alexixu.github.io/2019/10/27/reinforcement-learning01/</id>
    <published>2019-10-27T04:43:42.000Z</published>
    <updated>2019-10-27T09:52:04.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>强化学习任务一般通过马尔可夫决策过程（Markov Decision Process, MDP）来描述。</p><blockquote><p>A Markov decision process is a 4-tuple$(S,A,P_a,R_a)$, where</p><ul><li>$S$ is a finite set of states,</li><li>$A$ is the finite set of actions available from state $S$,</li><li>$P_a(s,s^{’})$ is the transfer probability.</li><li>$R_a(s, s^{‘})$ is the immediate reward from state to state s’.</li></ul></blockquote><p>而机器学习的任务便是不断尝试，学习得到一个新的策略（policy）$\pi$。基于这个策略，在不同的状态下选择不同的动作action。有两种表示方法，一种作为函数，一种作为概率表示，表示选择动作的概率。</p><p>目标便是长期奖励最大化的策略。常用的是T步累积奖赏。$E[1/T * \sum_{t=1} ^{T} {r_t}]$，或者加上一个累积折扣，即：</p><p>$E[\sum_{t=0} ^{+\infty} \gamma^t{r_t}]$</p><h2 id="K臂赌博机（K-armed-bandit）"><a href="#K臂赌博机（K-armed-bandit）" class="headerlink" title="K臂赌博机（K armed bandit）"></a>K臂赌博机（K armed bandit）</h2><p>这是最简单的场景，因为每一步都独立。即只需要最大化单步奖赏。这个情景下，一个动作的奖赏，是一个概率分布，无法通过一次工作得到它的期望奖赏。</p><p>这里分为两个阶段，在计算每个臂的期望奖赏时，可以采用仅探索，在知道每个臂的期望奖赏时，采用仅利用，去摇哪个期望奖赏最大的臂。单独使用这两种策略都无法实现奖励的最大化，这时候需要结合两种方式来完成。</p><h3 id="epsilon-贪心"><a href="#epsilon-贪心" class="headerlink" title="$\epsilon$-贪心"></a>$\epsilon$-贪心</h3><p>算法对两种方法取折中，即按照概率确定选用哪个策略，再进行摇臂。有一个优化就是，前期更倾向于探索，后期更倾向于利用，即根据步数修改$\epsilon$。</p><h3 id="softmax"><a href="#softmax" class="headerlink" title="softmax"></a>softmax</h3><p>算法基于期望奖赏，分配摇臂的概率，按照概率选择哪个臂。摇臂概率大分布按照Boltzmann分布。<br>$$<br>P(k) = \frac{e^\frac{Q(k)}{\tau}}{\sum e^{\frac{Q(i)}{\tau}}}<br>$$</p><h3 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h3><p>具体选择哪个取决于具体应用，也与选择的参数有关系，例如$\tau$, 越小，则趋向于仅利用</p><h2 id="有模型学习"><a href="#有模型学习" class="headerlink" title="有模型学习"></a>有模型学习</h2><p>假设，MDP过程的四元组已知，便认为是模型已知，即机器已经对环境建模。对于这种情况，成为有模型学习。</p><h3 id="策略评估"><a href="#策略评估" class="headerlink" title="策略评估"></a>策略评估</h3><p>在模型已知的情况下，策略$\pi$的累积奖赏便可以估计得到。</p><p>$V^\pi(x)$表示，在x的初始状态下，基于$\pi$策略的累积奖赏。称为状态值函数（state value funciton）</p><p>$Q^\pi(x, a)$表示 x作为初始状态，执行动作a后，带来的累积奖赏。称为：状态动作值函数。(state action value function)</p><p>根据累积奖赏的两种定义，可以得到：<br>$$<br>V_T^\pi(x) = E_\pi[1/T \ * \sum_{t=1}^{T}r_t|x_0 = x],  \ \ \ \ \  T步累积奖赏<br>$$</p><p>$$<br>V_T^\pi(x) = E_\pi[\sum_{t=0}^{+\infty}\gamma^tr_{t+1}|x_0 = x],  \ \ \ \ \  \gamma 折扣累积奖赏<br>$$</p><p>状态动作值函数为：<br>$$<br>Q_T^\pi(x,a) = E_\pi[1/T \ * \sum_{t=1}^{T}r_t|x_0 = x, a_0=a],  \ \ \ \ \  T步累积奖赏<br>$$</p><p>$$<br>Q_T^\pi(x,a) = E_\pi[\sum_{t=0}^{+\infty}\gamma^tr_{t+1}|x_0 = x,a_0=a],  \ \ \ \ \  \gamma 折扣累积奖赏<br>$$</p><p>基于马尔可夫性质，可以将公示写为递归的形式。<br>$$<br>V_T^\pi(x) = E_\pi[1/T \ * \sum_{t=1}^{T}r_t|x_0 = x] \<br>= \sum\pi(x, a)* \sum_{x\in X}(P_{x\rightarrow x^{‘}} * (\frac{1}{T} * R_{x\rightarrow x{‘}} + \frac{T-1}{T}* V_T^\pi(x^{‘})))<br>$$<br>同理，$\gamma$折扣累积奖赏也有如下的累积递归公式。<br>$$<br>V_T^\pi(x) = \sum\pi(x, a)* \sum_{x\in X}(P_{x\rightarrow x^{‘}} * (R_{x\rightarrow x{‘}} + \gamma * V_T^\pi(x^{‘})))<br>$$<br>可以看到，只有当状态转移矩阵P和奖赏矩阵R已知的前提下，才能完全展开。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;强化学习任务一般通过马尔可夫决策过程（Markov Decision Process, MDP）来描述。&lt;/p&gt;
&lt;bloc
      
    
    </summary>
    
    
      <category term="reinforcement learning" scheme="http://alexixu.github.io/categories/reinforcement-learning/"/>
    
    
  </entry>
  
  <entry>
    <title>神经网络机器翻译实践</title>
    <link href="http://alexixu.github.io/2019/10/23/machine-translation/"/>
    <id>http://alexixu.github.io/2019/10/23/machine-translation/</id>
    <published>2019-10-23T11:19:37.000Z</published>
    <updated>2019-10-31T11:37:41.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>机器翻译在神经网络之后得到了长足的发展。随着国际化的趋势，机器翻译在加强国际交流中的作用日益明显。本文将介绍一下基于最新的神经网络翻译架构Transformer来完成双语翻译。</p><h2 id="Transformer架构"><a href="#Transformer架构" class="headerlink" title="Transformer架构"></a>Transformer架构</h2><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p>Transformer架构图如下，总体可以分为两部分，编码器和解码器（Encoder和Decoder）。编码器和解码器分别有两种基本单元堆叠而成。基本单元又主要分为两种模块，Multi-Head Attention和Feed Forward Network。</p><img src="/2019/10/23/machine-translation/image-20191023191818320.png"><p>###Multi-Head Attention</p><p>首先说一下Attention，可以简单用下面一个公式说明白：<br>$$<br>Attention(Q,K,V) = softmax(\frac{QK^T}{\sqrt{d_k}})V<br>$$<br>这边采用$\sqrt{d_k}$进行缩放，因为当两个纬度增加时，向量的点基也会增大。</p><p>Multi Head Attention的过程就是先将Q，K，V映射到不同的子空间当中，再对不同的子空间做Attention，然后将结果联合起来，再通过一层全连接网络得到最后结果。<br>$$<br>MultiHead(Q,K,V) = Concat(head_1, head_2…)W^o<br>\\<br>where\ head_i = Attention(QW^q,KW^k,VW^v)<br>$$<br>其中， $W^q$,$W^k$,$W^v$的第二维度为各自初始维度d除以head数。</p><h3 id="Position-wise-Feed-Forward-Network"><a href="#Position-wise-Feed-Forward-Network" class="headerlink" title="Position-wise Feed Forward Network"></a>Position-wise Feed Forward Network</h3><p>有点类似kernel size为1的卷积。对每个位置上的深度向量进行计算。</p><h3 id="Position-Encoding"><a href="#Position-Encoding" class="headerlink" title="Position Encoding"></a>Position Encoding</h3><p>由于Attention机制，不能捕捉位置信息，需要将位置信息编码到输入向量当中。有相对编码和绝对编码两种方式。</p><h4 id="相对编码"><a href="#相对编码" class="headerlink" title="相对编码"></a>相对编码</h4><p>相对编码是固定的，直接通过三角函数计算得到：<br>$$<br>PE(pos, 2i) = sin(pos/10000^{2i/d_{model}})<br>$$</p><p>$$<br>PE(pos, 2i+1)=cos(pos/10000^{2i/d_{model}})<br>$$</p><p>pos是位置编号，i是维度向量中的位置。之所以选择三角函数，因为对于PE(pos+k)，可以很容易通过PE(pos) 线性变换得到。</p><h4 id="绝对位置编码"><a href="#绝对位置编码" class="headerlink" title="绝对位置编码"></a>绝对位置编码</h4><p>绝对位置编码比较简单，直接随机初始化一个embedding矩阵，直接在训练当中学习得到。</p><h4 id="二者比较"><a href="#二者比较" class="headerlink" title="二者比较"></a>二者比较</h4><p>论文上说，基于机器翻译的实验来说，二者性能上几乎没有区别。然后，选择了相对位置编码，因为作者认为，模型可以在位置长度超出训练集case的情况下，得到一个比较合适的位置向量。</p><h3 id="Mask机制"><a href="#Mask机制" class="headerlink" title="Mask机制"></a>Mask机制</h3><p>由于这边使用Attention，采用的是定长的结构，所以一般来说，会设一个最大长度，那么训练集当中会出现很多pad。期望的是在输入的时候，能够通过mask机制，将pad的向量在注意力机制中的权重为0。实现方式为修改attention权重矩阵，将mask的权重设置为一个超小的负数，使得算softmax时权重很小。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;机器翻译在神经网络之后得到了长足的发展。随着国际化的趋势，机器翻译在加强国际交流中的作用日益明显。本文将介绍一下基于最新的神
      
    
    </summary>
    
    
      <category term="nlp" scheme="http://alexixu.github.io/categories/nlp/"/>
    
    
  </entry>
  
  <entry>
    <title>深度理解Bi-LSTM+CRF网络</title>
    <link href="http://alexixu.github.io/2019/10/12/dive-into-bilstm-crf/"/>
    <id>http://alexixu.github.io/2019/10/12/dive-into-bilstm-crf/</id>
    <published>2019-10-12T03:06:12.000Z</published>
    <updated>2019-10-12T07:41:02.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络介绍"><a href="#网络介绍" class="headerlink" title="网络介绍"></a>网络介绍</h2><p>Bi-LSTM + CRF网络是曾经的STOA用于序列标注的模型，比如命名实体识别。接下来将详细介绍该模型。</p><h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2><p>LSTM全称为Long Short Term Memory networks，是循环神经网络（RNN）添加三个门的改进版本。循环神经网络会维护一个状态（state），并将该状态作为输入，一步一步迭代下去。如下图所示，因为这样的结构，使得梯度计算的时候，会有连乘项，使得梯度产生一个累积效应，导致梯度消失和梯度爆炸。</p><img src="dive-into-bilstm-crf/RNN-rolled.png" alt="img" style="zoom:22%;"><p>LSTM网络，则是通过添加三个门，来缓解梯度消失和梯度爆炸的问题。</p><p><img src="dive-into-bilstm-crf/LSTM3-chain.png" alt="A LSTM neural network."></p><p>遗忘门：<br>$$<br>f_t = \sigma(h_{t-1}* W_f + X_t<em>W_f + b_f)<br>$$<br>输入门：<br>$$<br>i_t = \sigma(h_{t-1}</em> W_i + X_t<em>W_i + b_i)<br>$$<br>输出门：<br>$$<br>o_t  =\sigma(h_{t-1}</em> W_o + X_t<em>W_o + b_o)<br>$$<br>待更新：<br>$$<br>C = \tanh(h_{t-1}</em> W + X_t*W + b)<br>$$<br>更新：<br>$$<br>C_t = C_{t-1} * f_t + C * i_t<br>$$<br>输出：<br>$$<br>h_t = \tanh( C_t) * o_t<br>$$</p><h3 id="变种"><a href="#变种" class="headerlink" title="变种"></a>变种</h3><p>后面还有很多变种，比如将c也作为输入添加到各个门的计算中。</p><h2 id="条件随机场-CRF"><a href="#条件随机场-CRF" class="headerlink" title="条件随机场 CRF"></a>条件随机场 CRF</h2><p>首先介绍一下马尔可夫随机场。如果联合概率分布 P(V) 满足成对、局部或全局马尔可夫性，就称此联合概率分布为概率无向图模型或马尔可夫随机场。我的理解具体就是通过边来表示依赖，如果局部的节点给定了，相当于从途中去掉之后，两部分节点属于断开的话，就是条件独立。</p><p>条件随机场，属于为概率图模型。是条件概率分布模型 P(Y|X) ，表示的是给定一组输入随机变量 X 的条件下另<strong>一组输出</strong>随机变量 Y 的马尔可夫随机场，也就是说 CRF 的特点是假设输出随机变量构成马尔可夫随机场。</p><p>下图说明了CRF与逻辑回归的的关系和区别，逻辑回归通过几个输入变量，确定一个输出。若是有多个输出，且输出之间存在依赖，则演化成了条件随机场。若依赖是一条直线， 则是线性链条件随机场。下图中，个人理解有一个地方不太对，就是线性链随机场那个子图，每个白圈的依赖不只是只有对应的黑圈，而是所有黑圈。正如第一幅逻辑回归那样。</p><p><img src="dive-into-bilstm-crf/1008922-20170528172136235-591980719.png" alt="img"></p><h3 id="特征函数"><a href="#特征函数" class="headerlink" title="特征函数"></a>特征函数</h3><p>转移特征 $t_k(y_{i-1},y_i, x, i)$ 是定义在边上的特征函数（transition），依赖于当前位置 i 和前一位置 i-1 ；对应的权值为 $\lambda_k$ 。</p><p>状态特征$s_k(y_i,x,i)$是定义在节点上的特征函数（state），依赖于当前位置 i ；对应的权值为$\mu_k$。</p><p>一般来说，特征函数的取值为 1 或 0 ，当满足规定好的特征条件时取值为 1 ，否则为 0 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网络介绍&quot;&gt;&lt;a href=&quot;#网络介绍&quot; class=&quot;headerlink&quot; title=&quot;网络介绍&quot;&gt;&lt;/a&gt;网络介绍&lt;/h2&gt;&lt;p&gt;Bi-LSTM + CRF网络是曾经的STOA用于序列标注的模型，比如命名实体识别。接下来将详细介绍该模型。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="NLP" scheme="http://alexixu.github.io/categories/NLP/"/>
    
    
  </entry>
  
  <entry>
    <title>Tensorflow2.0源码安装</title>
    <link href="http://alexixu.github.io/2019/10/09/Tensorflow-install-from-source/"/>
    <id>http://alexixu.github.io/2019/10/09/Tensorflow-install-from-source/</id>
    <published>2019-10-09T12:14:16.000Z</published>
    <updated>2019-10-11T02:17:39.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装步骤（mac）"><a href="#安装步骤（mac）" class="headerlink" title="安装步骤（mac）"></a>安装步骤（mac）</h2><h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><p>操作系统：Mac os</p><p>环境：Python3，JDK 8</p><h3 id="安装编译工具"><a href="#安装编译工具" class="headerlink" title="安装编译工具"></a>安装编译工具</h3><p>安装bazel；推荐使用homebrew安装</p><blockquote><p>Note: 版本要求要低于0.26.1，所以在安装时候需要指定版本，选择合适的formula.</p><p>这里给出一个合适的地址：<a href="https://raw.githubusercontent.com/bazelbuild/homebrew-tap/c8a0ccc2a8b442d9887d88c6380f835f533ffd47/Formula/bazel.rb" target="_blank" rel="noopener">https://raw.githubusercontent.com/bazelbuild/homebrew-tap/c8a0ccc2a8b442d9887d88c6380f835f533ffd47/Formula/bazel.rb</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install https://raw.githubusercontent.com/bazelbuild/homebrew-tap/c8a0ccc2a8b442d9887d88c6380f835f533ffd47/Formula/bazel.rb</span><br></pre></td></tr></table></figure><h3 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> tensorflow</span><br><span class="line">git checkout (branch you want to install)</span><br></pre></td></tr></table></figure><h3 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -U --user pip six numpy wheel setuptools mock <span class="string">'future&gt;=0.17.1'</span></span><br><span class="line">pip install -U --user keras_applications==1.0.6 --no-deps</span><br><span class="line">pip install -U --user keras_preprocessing==1.0.5 --no-deps</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p>这里大部分都选择默认的no，可以开启XLA优化</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bazel build //tensorflow/tools/pip_package:build_pip_package</span><br></pre></td></tr></table></figure><p>接下来是漫长的等待，我的机器编译了一天（mbp）。</p><h3 id="编译python包"><a href="#编译python包" class="headerlink" title="编译python包"></a>编译python包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg</span><br></pre></td></tr></table></figure><p>得到一个whl包，通过pip安装即可将tensorflow安装至python环境。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装步骤（mac）&quot;&gt;&lt;a href=&quot;#安装步骤（mac）&quot; class=&quot;headerlink&quot; title=&quot;安装步骤（mac）&quot;&gt;&lt;/a&gt;安装步骤（mac）&lt;/h2&gt;&lt;h3 id=&quot;基础环境&quot;&gt;&lt;a href=&quot;#基础环境&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="TensorFlow" scheme="http://alexixu.github.io/categories/TensorFlow/"/>
    
    
  </entry>
  
  <entry>
    <title>Python扩展介绍</title>
    <link href="http://alexixu.github.io/2019/10/07/python-extension/"/>
    <id>http://alexixu.github.io/2019/10/07/python-extension/</id>
    <published>2019-10-07T09:32:32.000Z</published>
    <updated>2019-10-09T12:33:36.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是扩展？"><a href="#什么是扩展？" class="headerlink" title="什么是扩展？"></a>什么是扩展？</h2><p>能够被整合或者导入到其它python脚本中运行的代码，都可以称之为扩展。可以用python写一个package作为扩展，也可以通过C/C++或者JAVA等语言为python写扩展。</p><h2 id="为什么需要扩展"><a href="#为什么需要扩展" class="headerlink" title="为什么需要扩展"></a>为什么需要扩展</h2><p>有以下三个方面</p><ol><li>满足新功能等需要</li><li>提升性能</li><li>增强代码私密性</li></ol><p>一些用python实现不了的功能，需要通过非python代码实现，比如调用GPU等。</p><p>解释型语言的效率相比编译型速度会慢一些，在聚焦到核心代码后，通过扩展可以加速这部分代码。</p><p>同样，解释型语言暴露源代码，扩展可以免于暴露源代码，增加私密性。</p><h2 id="扩展步骤"><a href="#扩展步骤" class="headerlink" title="扩展步骤"></a>扩展步骤</h2><p>3个主要步骤</p><ol><li>完成扩展到功能代码实现</li><li>利用样版包装代码</li><li>编译测试</li></ol><h4 id="第一步-完成功能代码实现"><a href="#第一步-完成功能代码实现" class="headerlink" title="第一步 完成功能代码实现"></a>第一步 完成功能代码实现</h4><p>此时，可以通过编写main函数的方式，对代码功能性进行测试，保障代码正确性。这边，我给出一个简单的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是扩展？&quot;&gt;&lt;a href=&quot;#什么是扩展？&quot; class=&quot;headerlink&quot; title=&quot;什么是扩展？&quot;&gt;&lt;/a&gt;什么是扩展？&lt;/h2&gt;&lt;p&gt;能够被整合或者导入到其它python脚本中运行的代码，都可以称之为扩展。可以用python写一个packag
      
    
    </summary>
    
    
      <category term="python" scheme="http://alexixu.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>架构整洁之道读书笔记</title>
    <link href="http://alexixu.github.io/2019/09/30/clean-architecture-notes/"/>
    <id>http://alexixu.github.io/2019/09/30/clean-architecture-notes/</id>
    <published>2019-09-30T06:07:23.000Z</published>
    <updated>2019-09-30T11:26:40.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-什么是架构"><a href="#第一章-什么是架构" class="headerlink" title="第一章 什么是架构"></a>第一章 什么是架构</h2><h2 id="架构的目标"><a href="#架构的目标" class="headerlink" title="架构的目标"></a>架构的目标</h2><p>以最小的成本构建和维护一个软件系统，满足业务需求（包括当前需求和未来需求）。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>忽视好的设计的作用，导致后续维护成本持续增长。</li><li>容忍糟糕的代码，为了临时上线。</li></ol><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>慢但是稳，是成功的秘诀。要跑的快，先要跑得稳。</p><h2 id="第二章-两个价值维度"><a href="#第二章-两个价值维度" class="headerlink" title="第二章 两个价值维度"></a>第二章 两个价值维度</h2><h3 id="软件的价值"><a href="#软件的价值" class="headerlink" title="软件的价值"></a>软件的价值</h3><ol><li>行为价值（满足业务需求的行为）</li><li>架构价值（软件灵活性，适应后续的需求变更和增加）</li></ol><h3 id="研发人员的职责"><a href="#研发人员的职责" class="headerlink" title="研发人员的职责"></a>研发人员的职责</h3><p>业务肯定认为行为价值更重要，但是软件开发人员应该重视架构价值，因为一个不可变更或者不可维护的软件系统的价值会最终变成0，而一个维护行好的软件系统会持续产生价值。</p><p>业务部门并不对系统的架构价值负责，所以研发人员需要自己平衡好架构价值，并为此负责，与其他部门协调。</p><h2 id="第三章-编程范式"><a href="#第三章-编程范式" class="headerlink" title="第三章 编程范式"></a>第三章 编程范式</h2><h3 id="结构化编程"><a href="#结构化编程" class="headerlink" title="结构化编程"></a>结构化编程</h3><p>结构化编程对程序控制权的直接转移进行了限制和规范。</p><p>限制goto</p><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p>对程序控制权的间接转移进行了限制和规范</p><p>限制函数指针的使用（通过多态）</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>对程序的赋值进行了限制和规范</p><p>不可变性</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>三个编程范式都是限制程序员行为。</p><h2 id="第四章-结构化编程"><a href="#第四章-结构化编程" class="headerlink" title="第四章 结构化编程"></a>第四章 结构化编程</h2><p>通过结构化编程，将软件拆分为一个个可推导的单元，通过测试证明这些程序是无法证伪的，则认为程序正确。</p><p>按功能性降解拆分是软件设计的最佳实践之一。</p><h2 id="第五章-面向对象编程"><a href="#第五章-面向对象编程" class="headerlink" title="第五章 面向对象编程"></a>第五章 面向对象编程</h2><h3 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h3><ol><li>封装</li><li>继承</li><li>多态</li></ol><p>三个特性并不是面向对象编程的创新，之前就通过其他方式实现，但是需要人为遵守规定。面向对象编程消除了人工遵守的必要，通过语言层面实现多态，更简单和安全。</p><h3 id="多态的作用"><a href="#多态的作用" class="headerlink" title="多态的作用"></a>多态的作用</h3><ol><li>与具体实现无关</li><li>依赖反转（引入接口）</li></ol><p>通过控制组件的依赖，让高层次策略组件和底层实现组件可以相分离，实现独立部署。</p><h2 id="第六章-函数式编程"><a href="#第六章-函数式编程" class="headerlink" title="第六章 函数式编程"></a>第六章 函数式编程</h2><p>通过变量的不可变性，充分利用多线程的好处，同时避免了变量更改导致的竞争问题。</p><p>如果计算和存储无限制的话，不可变性在程序设计中说可行的，例如git版本管理。</p><p>在实际情况中，一般说将可变性隔离起来，将不可变量和可变量隔离到不同的组件当中，用合适的机制（锁，事务）保护可变量。</p><h2 id="第七章-单一职责原则"><a href="#第七章-单一职责原则" class="headerlink" title="第七章 单一职责原则"></a>第七章 单一职责原则</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一个软件模块，只对某一类行为负责，只对一类客户负责。</p><h3 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h3><p>单一职责原则主要用于界定函数和类之间的关系，同时，在更高的层面上，比如组件层面，有一个类似的原则，共同闭包原则，在软件架构层面，用于界定架构的边界。</p><h2 id="第八章-开闭原则"><a href="#第八章-开闭原则" class="headerlink" title="第八章 开闭原则"></a>第八章 开闭原则</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>易于扩展，抗拒修改</p><h3 id="Note-2"><a href="#Note-2" class="headerlink" title="Note"></a>Note</h3><p>高阶组件不因为低阶组件更改而影响</p><p>业务逻辑是核心抽象</p><h2 id="第九章-里氏替换"><a href="#第九章-里氏替换" class="headerlink" title="第九章 里氏替换"></a>第九章 里氏替换</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>所有引用基类的地方必须能透明地使用其子类的对象。</p><p><strong>子类可以扩展父类的功能，但不能改变父类原有的功能。</strong></p><h3 id="Note-3"><a href="#Note-3" class="headerlink" title="Note"></a>Note</h3><p>违反LSP原则，系统会不得不增加很多复杂的应对机制。比如各种if else语句</p><h2 id="第十章-接口隔离原则"><a href="#第十章-接口隔离原则" class="headerlink" title="第十章 接口隔离原则"></a>第十章 接口隔离原则</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>不应该强迫客户依赖于它们不用的方法。</p><p>任何让用户依赖他们不需要的东西都是有害的。</p><h3 id="Note-4"><a href="#Note-4" class="headerlink" title="Note"></a>Note</h3><p>不必要的功能代码，导致不必要的重新部署和意外的错误。</p><h2 id="第十一章-依赖反转原则"><a href="#第十一章-依赖反转原则" class="headerlink" title="第十一章 依赖反转原则"></a>第十一章 依赖反转原则</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。</p><h3 id="规定"><a href="#规定" class="headerlink" title="规定"></a>规定</h3><ol><li>高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口。</li><li>抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。</li></ol><h3 id="Note-5"><a href="#Note-5" class="headerlink" title="Note"></a>Note</h3><p>接口比实现更稳定</p><p>不可避免地依赖具体实现，比如操作系统，但是这部分很少改动。</p><p>要重点关注经常变动的部分</p><p>使得代码依赖是单向的</p><h2 id="第十二章-组件"><a href="#第十二章-组件" class="headerlink" title="第十二章 组件"></a>第十二章 组件</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>组件是最小部署单元</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章-什么是架构&quot;&gt;&lt;a href=&quot;#第一章-什么是架构&quot; class=&quot;headerlink&quot; title=&quot;第一章 什么是架构&quot;&gt;&lt;/a&gt;第一章 什么是架构&lt;/h2&gt;&lt;h2 id=&quot;架构的目标&quot;&gt;&lt;a href=&quot;#架构的目标&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="软件架构" scheme="http://alexixu.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>virtualenv失效原因</title>
    <link href="http://alexixu.github.io/2018/06/23/virtualenv%E5%A4%B1%E6%95%88%E5%8E%9F%E5%9B%A0/"/>
    <id>http://alexixu.github.io/2018/06/23/virtualenv失效原因/</id>
    <published>2018-06-23T10:22:00.000Z</published>
    <updated>2019-09-24T12:52:11.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题：virtualenv-activate-后失效"><a href="#问题：virtualenv-activate-后失效" class="headerlink" title="问题：virtualenv activate 后失效"></a>问题：virtualenv activate 后失效</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Virtualenv 经常用于python环境的隔离，但有时候执行了activate命令，终端显示已经进入对应环境（终端前面会显示环境名称）。此时，执行python会发现并没有使用对应环境下的python解释器，而是调用的系统的python解释器。</p><h3 id="导致原因"><a href="#导致原因" class="headerlink" title="导致原因"></a>导致原因</h3><p>执行source activate 其实是加载activate这个脚本，打开脚本可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">VIRTUAL_ENV=<span class="string">"/Users/someone/Documents/python_env/python3"</span></span><br><span class="line"><span class="built_in">export</span> VIRTUAL_ENV</span><br><span class="line"></span><br><span class="line">_OLD_VIRTUAL_PATH=<span class="string">"<span class="variable">$PATH</span>"</span></span><br><span class="line">PATH=<span class="string">"<span class="variable">$VIRTUAL_ENV</span>/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><p>上述脚本其实就是virtualenv 切换python环境的实现方式，通过在环境变量的最前面添加当前环境的python解释器的路径完成。需要注意的是，这个路径是在脚本中写死的，所以如果你将python环境的目录修改了，那么此时会将一个错误的python解释器路径添加到环境变量当中，当然也就找不到对应的解释器，于是系统会接着往下找，最后找到系统的解释器。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>将VIRTUAL_ENV这个环境变量设置为正确的目录路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题：virtualenv-activate-后失效&quot;&gt;&lt;a href=&quot;#问题：virtualenv-activate-后失效&quot; class=&quot;headerlink&quot; title=&quot;问题：virtualenv activate 后失效&quot;&gt;&lt;/a&gt;问题：virtu
      
    
    </summary>
    
    
      <category term="python" scheme="http://alexixu.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://alexixu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性模型</title>
    <link href="http://alexixu.github.io/2017/09/24/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/"/>
    <id>http://alexixu.github.io/2017/09/24/线性模型/</id>
    <published>2017-09-24T13:09:53.000Z</published>
    <updated>2019-09-24T15:40:13.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h1><h2 id="1-基本形式"><a href="#1-基本形式" class="headerlink" title="1.基本形式"></a>1.基本形式</h2><p>线性模型的基本思想是通过属性或者特征的线性组合来预测的函数. 数学表达如下:</p><img src="/2017/09/24/线性模型/liner_model_repress.png"><p>更通俗的向量表达为:</p><img src="/2017/09/24/线性模型/liner_model_vec_repress.png"><p>线性模型比较简单, 并且具有较好的解释性. 很多非线性模型实际上是通过将特征映射到高维空间当中或者通过引入层级结构来实现非线性模型.<br>经典的线性模型有: 线性回归, 逻辑回归.</p><h2 id="2-线性回归"><a href="#2-线性回归" class="headerlink" title="2. 线性回归"></a>2. 线性回归</h2><p>基于已有数据集 D = {(x<sub>1</sub>, y<sub>1</sub> ) …, (x<sub>m</sub>, y<sub>m</sub> )}, 其中x为向量, 表示特征集合. y为实数. 线性回归会取学习到一个线性模型, 使得根据特征向量x, 可以尽可能精确的预测y. </p><img src="/2017/09/24/线性模型/liner_model_learn_what.png"><p>为了确定模型中的参数w, b. 我们首先需要找到一个模型的性能度量. 在回归任务当中, 比较常用的衡量指标是: 均方误差. 这样, 目标函数便是最小化均方误差, 也叫做最小二乘法.<br>均方误差具有较好的几何意义, 它对应了常用的欧几里得距离. </p><img src="/2017/09/24/线性模型/liner_model_wb_target.png"><p>求解w和b的上述过程, 叫做 线性回归模型的最小二乘 “参数估计”.  由于上述函数是关于w和b的凸函数(这个地方我很好奇 为什么不是叫凹函数,从文字象形上来说 更像凹形状), 因为有这样的性质, 直接求导, 导数为0的点必是最优解, 也是上述函数的最小值点. </p><img src="/2017/09/24/线性模型/wb_derivative.png"><p>解得:</p><img src="/2017/09/24/线性模型/w_solution.png"><img src="/2017/09/24/线性模型/b_solution.png"><p>计算机中, 利用矩阵可以通过并行计算加速, 矩阵形式的表示的求解如下:<br>首先为了计算, 做一点变化, 首先在x的特征向量当中添加一个常数项 1, 这样可以让b 添加w中.即:</p><img src="/2017/09/24/线性模型/w_b_add.png"><p>于是, 矩阵表示的目标函数为:</p><img src="/2017/09/24/线性模型/w_vec_solution.png"><p>对w求导可以得到:</p><img src="/2017/09/24/线性模型/w_vector_solution.png"><img src="/2017/09/24/线性模型/w_youjie.png"><p>实际情况是, 由于样本数量较多, 并且 有误差的存在, X<sup>T</sup>X不是满秩矩阵, 这个时候可以通过引入正则化变量</p><p>最后说一下广义线性模型, 即在输出的结果中, 使之成为一个可微函数的的输入. </p><h2 id="3-逻辑回归"><a href="#3-逻辑回归" class="headerlink" title="3.逻辑回归"></a>3.逻辑回归</h2><h3 id="i-模型表示"><a href="#i-模型表示" class="headerlink" title="i 模型表示"></a>i 模型表示</h3><p>上述线性回归返回的是一个连续值, 那么在做进行分类任务的时候, 需要将连续值转换为0/1值.<br>可以想到的是单位阶跃函数, 和 sigmoid函数. 这里利用广义线性模型, 将求得的连续值作为可微函数输入.<br>由于单位阶跃函数不可微, 所以一般都会选择sigmoid函数, 将输出的值, 记作z 转换为0 -1 之间的连续值.<br>sigmoid函数可以表示为:</p><img src="/2017/09/24/线性模型/sigmoid.png"><p>最后输出可以表示为:</p><img src="/2017/09/24/线性模型/logistic_function.png"><h3 id="ii-目标函数-损失函数"><a href="#ii-目标函数-损失函数" class="headerlink" title="ii 目标函数(损失函数)"></a>ii 目标函数(损失函数)</h3><p>经过转换后, 我们可以将y的值看作样本为正例的概率, 将1 - y 看作样本为负例的概率. 然后通过”极大似然法”来对参数w和b进行估计.</p><img src="/2017/09/24/线性模型/logistic_repress.gif"><p>这里用theta将w和b 一起表示<br>单个样本的概率表示为:</p><img src="/2017/09/24/线性模型/probability.gif"><p>极大似然函数为:</p><img src="/2017/09/24/线性模型/L_func_logistic_without_log.gif"><p>取对数后:</p><img src="/2017/09/24/线性模型/L_func_logistic.gif"><p>结果就是要最大话上面的公式, 最大化和最小化是等价的, 但一般都会选择转化为最小化. 也就是在上述公式前面添加负号.</p><h3 id="iii-通过梯度下降求解"><a href="#iii-通过梯度下降求解" class="headerlink" title="iii 通过梯度下降求解"></a>iii 通过梯度下降求解</h3><p>要使得最小化下面公式:</p><img src="/2017/09/24/线性模型/logistic_loss_function.png"><p>采用梯度下降的方式完成.<br>此时通过链式求导, 并且注意利用性质:<br>g(z)的导数为: g(z)*(1 - g(z))<br>手工求解如下(这个地方用到损失函数多求了一个平均):</p><img src="/2017/09/24/线性模型/logistic_solution.jpeg"><p>其中, a为学习率, 当模型训练无法收敛时, 可以尝试将学习率调小</p><h3 id="iiii-正则化"><a href="#iiii-正则化" class="headerlink" title="iiii 正则化"></a>iiii 正则化</h3><p>在目标函数中, 为了防止过拟合, 一般会加入正则项.<br>通常选用的正则项为L1正则和L2正则.<br>这两种正则化的区别是L1正则可以更容易产生稀疏解.</p><h2 id="4-其它"><a href="#4-其它" class="headerlink" title="4.其它"></a>4.其它</h2><p>逻辑回归是一种判别模型, 直接对P(y|x)建模. 生成式模型则是对数据的联合分布建模. 通过贝叶斯公式计算个类别的后验概率, 即:</p><img src="/2017/09/24/线性模型/generative_model.png"><p>事实上, 当P(x|y)的分布属于指数分布族时, 可以将生成式推导到判别式模型.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性模型&quot;&gt;&lt;a href=&quot;#线性模型&quot; class=&quot;headerlink&quot; title=&quot;线性模型&quot;&gt;&lt;/a&gt;线性模型&lt;/h1&gt;&lt;h2 id=&quot;1-基本形式&quot;&gt;&lt;a href=&quot;#1-基本形式&quot; class=&quot;headerlink&quot; title=&quot;1.基本形
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://alexixu.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习 逻辑回归 线性回归" scheme="http://alexixu.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
</feed>
